/**
 * @fileoverview Firestore Security Rules for the Budget Tracker application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for budgets and their associated
 * categories and transactions. Each budget belongs to a specific user, and
 * only that user can create, read, update, or delete the budget and its data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the authenticated
 *   user can read and write their own profile.
 * - /budgets/{budgetId}: Stores monthly budget documents. Each document has a
 *   'userId' field indicating the owner.
 * - /budgets/{budgetId}/categories/{categoryId}: Stores categories within a
 *   specific budget. Inherits ownership from the parent budget.
 * - /budgets/{budgetId}/transactions/{transactionId}: Stores transactions
 *   within a specific budget. Inherits ownership from the parent budget.
 *
 * Key Security Decisions:
 * - Users can only access their own budgets, categories, and transactions.
 * - User listing is disallowed for privacy.
 * - Data validation is minimized in this prototype for rapid iteration. Focus
 *   is placed on authorization and ownership.
 *
 * Denormalization for Authorization:
 * - The 'Budget' document includes the 'userId' field to enable ownership
 *   checks without needing to query the /users collection.
 *
 * Structural Segregation:
 * - There are no public collections in this application. All data is protected
 *   by user authentication and ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can read, update, and delete their own profile.
     * @deny (create) - Cannot create a profile for another user.
     * @deny (list) - User listing is not allowed.
     * @principle Enforces document ownership for all operations.
     */
match /users/{userId} {
  function isOwner(userId) {
    return request.auth.uid == userId;
  }
  function isSignedIn() {
    return request.auth != null;
  }
  allow get: if isSignedIn() && (resource == null || isOwner(userId));
  allow list: if false;
  allow create: if isSignedIn() && isOwner(userId);
  allow update: if isSignedIn() && isOwner(userId);
  allow delete: if isSignedIn() && isOwner(userId);
}


    /**
     * @description Secures monthly budget documents.
     * @path /budgets/{budgetId}
     * @allow (create) - Authenticated user can create a budget if the userId in the document matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can read, update, and delete their own budget.
     * @deny (create) - Cannot create a budget for another user.
     * @deny (update) - Cannot update a budget to change ownership.
     * @principle Enforces document ownership for writes, validates creator on create.
     */
    match /budgets/{budgetId} {
      function isBudgetOwner(budgetId) {
        return get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isBudgetOwner(budgetId);
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isBudgetOwner(budgetId);
      allow delete: if isSignedIn() && isBudgetOwner(budgetId);
    }

    /**
     * @description Secures categories within a specific monthly budget.
     * @path /budgets/{budgetId}/categories/{categoryId}
     * @allow (create) - Authenticated user can create a category within their budget.
     * @allow (get, update, delete) - Authenticated user can read, update, and delete categories within their budget.
     * @deny (create) - Cannot create a category within another user's budget.
     * @deny (update) - Cannot update a category to change ownership.
     * @principle Inherits ownership from the parent budget, enforces ownership for writes.
     */
    match /budgets/{budgetId}/categories/{categoryId} {
      function isBudgetOwner(budgetId) {
        return get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      }
      function isSignedIn() {
        return request.auth != null;
      }
        allow get: if isSignedIn() && isBudgetOwner(budgetId);
        allow list: if isSignedIn() && isBudgetOwner(budgetId);
        allow create: if isSignedIn() && isBudgetOwner(budgetId);
        allow update: if isSignedIn() && isBudgetOwner(budgetId);
        allow delete: if isSignedIn() && isBudgetOwner(budgetId);
    }

    /**
     * @description Secures transactions within a specific monthly budget.
     * @path /budgets/{budgetId}/transactions/{transactionId}
     * @allow (create) - Authenticated user can create a transaction within their budget.
     * @allow (get, update, delete) - Authenticated user can read, update, and delete transactions within their budget.
     * @deny (create) - Cannot create a transaction within another user's budget.
     * @deny (update) - Cannot update a transaction to change ownership.
     * @principle Inherits ownership from the parent budget, enforces ownership for writes.
     */
    match /budgets/{budgetId}/transactions/{transactionId} {
      function isBudgetOwner(budgetId) {
        return get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      }
      function isSignedIn() {
        return request.auth != null;
      }
        allow get: if isSignedIn() && isBudgetOwner(budgetId);
        allow list: if isSignedIn() && isBudgetOwner(budgetId);
        allow create: if isSignedIn() && isBudgetOwner(budgetId);
        allow update: if isSignedIn() && isBudgetOwner(budgetId);
        allow delete: if isSignedIn() && isBudgetOwner(budgetId);
    }
  }
}