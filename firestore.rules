rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description This ruleset enforces a user-ownership model for budgets, categories, and transactions.
     *              Users can only read and write their own budgets, categories, and transactions. User profiles
     *              are also secured with an ownership model.
     * @dataStructure
     *   - /users/{userId}: Stores user profile information.
     *   - /budgets/{budgetId}: Stores monthly budget documents for all users. Contains the userId.
     *   - /budgets/{budgetId}/categories/{categoryId}: Sub-collection for categories within a specific monthly budget.
     *   - /budgets/{budgetId}/transactions/{transactionId}: Sub-collection for transactions within a specific monthly budget.
     * @keySecurityDecisions
     *   - Users can only access their own data.
     *   - Listing all users is disallowed.
     *   - No global admin roles are defined.
     * @denormalizationForAuthorization
     *   - The Budget documents include a userId field to identify the owner. This avoids needing to query other collections to determine ownership.
     */

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the resource
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper function to check if the user is the owner of an existing resource
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile document.
     * @allow (get) User with ID 'user123' can read their own profile document.
     * @allow (update) User with ID 'user123' can update their own profile document.
     * @allow (delete) User with ID 'user123' can delete their own profile document.
     * @deny (create) User with ID 'user456' cannot create a profile document for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile document of 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email is string && request.resource.data.displayName is string && request.resource.data.createdAt is string;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to budget documents.
     * @path /budgets/{budgetId}
     * @allow (create) User with ID 'user123' can create a budget document with userId 'user123'.
     * @allow (get) User with ID 'user123' can read a budget document with userId 'user123'.
     * @allow (update) User with ID 'user123' can update a budget document with userId 'user123'.
     * @allow (delete) User with ID 'user123' can delete a budget document with userId 'user123'.
     * @deny (create) User with ID 'user456' cannot create a budget document with userId 'user123'.
     * @deny (get) User with ID 'user456' cannot read a budget document with userId 'user123'.
     * @principle Enforces document ownership for budgets.
     */
    match /budgets/{budgetId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.month is string && request.resource.data.monthlyBudget is number;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Controls access to category documents within a budget.
     * @path /budgets/{budgetId}/categories/{categoryId}
     * @allow (create) User with ID 'user123' can create a category in their budget.
     * @allow (get) User with ID 'user123' can read a category in their budget.
     * @allow (update) User with ID 'user123' can update a category in their budget.
     * @allow (delete) User with ID 'user123' can delete a category in their budget.
     * @deny (create) User with ID 'user456' cannot create a category in 'user123's budget.
     * @deny (get) User with ID 'user456' cannot read a category in 'user123's budget.
     * @principle Enforces document ownership for budget categories.
     */
    match /budgets/{budgetId}/categories/{categoryId} {
      allow get: if isSignedIn() && get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      allow list: if isSignedIn() && get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid && request.resource.data.name is string && request.resource.data.iconName is string && request.resource.data.budget is number && request.resource.data.spent is number;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
    }

    /**
     * @description Controls access to transaction documents within a budget.
     * @path /budgets/{budgetId}/transactions/{transactionId}
     * @allow (create) User with ID 'user123' can create a transaction in their budget.
     * @allow (get) User with ID 'user123' can read a transaction in their budget.
     * @allow (update) User with ID 'user123' can update a transaction in their budget.
     * @allow (delete) User with ID 'user123' can delete a transaction in their budget.
     * @deny (create) User with ID 'user456' cannot create a transaction in 'user123's budget.
     * @deny (get) User with ID 'user456' cannot read a transaction in 'user123's budget.
     * @principle Enforces document ownership for budget transactions.
     */
    match /budgets/{budgetId}/transactions/{transactionId} {
      allow get: if isSignedIn() && get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      allow list: if isSignedIn() && get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid && request.resource.data.categoryId is string && request.resource.data.amount is number && request.resource.data.description is string && request.resource.data.date is string;
      allow update: if isSignedIn() && get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      allow delete: if isSignedIn() && get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
    }
  }
}