/**
 * @fileoverview Firestore Security Rules for the budgeting application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for budgets, categories, and transactions,
 * ensuring that only the authenticated user who owns a budget can create, read, update, or delete it and its associated subcollections.
 * User profiles are also secured with an ownership model, with only the authenticated user able to read and write their own profile data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.  `userId` must match the authenticated user's UID.
 * - /budgets/{budgetId}: Stores monthly budget data. `userId` field within the budget document must match the authenticated user's UID.
 * - /budgets/{budgetId}/categories/{categoryId}: Stores budget categories for a specific budget.
 * - /budgets/{budgetId}/transactions/{transactionId}: Stores transactions for a specific budget.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - The rules leverage denormalization to avoid costly `get()` calls within the rules.  Each budget, category, and transaction contains a `userId` field for easy ownership checks.
 * - In prototyping mode, data validation is relaxed for rapid iteration.  Only critical authorization and relational integrity checks are performed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @allow (get, update, delete) User with UID 'user_abc' can get, update, and delete their profile at /users/user_abc.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot get, update, or delete the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures monthly budget documents, ensuring only the owner can manage them.
     * @path /budgets/{budgetId}
     * @allow (create) User with UID 'user_abc' can create a budget with userId: 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a budget with userId: 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can get, list, update, and delete a budget with userId: 'user_abc'.
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot get, list, update, or delete a budget with userId: 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /budgets/{budgetId} {
      function isBudgetOwner() {
          return request.auth.uid == request.resource.data.userId;
      }

      function isExistingBudgetOwner() {
          return request.auth.uid == resource.data.userId && resource != null;
      }

      allow get: if isExistingBudgetOwner();
      allow list: if request.auth.uid != null;
      allow create: if isBudgetOwner();
      allow update: if isExistingBudgetOwner();
      allow delete: if isExistingBudgetOwner();
    }

    /**
     * @description Secures budget categories within a specific monthly budget, ensuring only the budget owner can manage them.
     * @path /budgets/{budgetId}/categories/{categoryId}
     * @allow (create) User with UID 'user_abc' can create a category under a budget they own.
     * @deny (create) User with UID 'user_xyz' cannot create a category under a budget owned by 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can get, list, update, and delete a category under a budget they own.
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot get, list, update, or delete a category under a budget owned by 'user_abc'.
     * @principle Enforces document ownership for all operations, inheriting ownership from the parent budget document.
     */
    match /budgets/{budgetId}/categories/{categoryId} {
      allow get: if get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      allow list: if get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      allow create: if get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      allow update: if get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      allow delete: if get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
    }

    /**
     * @description Secures transactions within a specific monthly budget, ensuring only the budget owner can manage them.
     * @path /budgets/{budgetId}/transactions/{transactionId}
     * @allow (create) User with UID 'user_abc' can create a transaction under a budget they own.
     * @deny (create) User with UID 'user_xyz' cannot create a transaction under a budget owned by 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can get, list, update, and delete a transaction under a budget they own.
     * @deny (get, list, update, delete) User with UID 'user_xyz' cannot get, list, update, or delete a transaction under a budget owned by 'user_abc'.
     * @principle Enforces document ownership for all operations, inheriting ownership from the parent budget document.
     */
    match /budgets/{budgetId}/transactions/{transactionId} {
      allow get: if get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      allow list: if get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      allow create: if get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      allow update: if get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
      allow delete: if get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
    }
  }
}